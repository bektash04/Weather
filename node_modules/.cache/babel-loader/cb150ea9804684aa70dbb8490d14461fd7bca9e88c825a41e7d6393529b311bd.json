{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  weather\n}) => {\n  const timeFormater = sec => {\n    const time = new Date(sec * 1000);\n    const hours = time.getHours();\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const day = time.getDate(); // Получение числа\n    const month = timeData.getMonth() + 1; // Получение месяца (начиная с 0, поэтому добавляем 1)\n    return {\n      time: `${hours}:${minutes}:${seconds}`,\n      date: `${day}.${month}`\n    };\n  };\n  const kelvinToCelsius = kelvin => {\n    return kelvin - 273.15;\n  };\n  const timeData = timeFormater(weather.dt);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: weather && weather.cod !== '200' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [weather.name, \", \", weather.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${weather.weather[0].icon}.png`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [kelvinToCelsius(weather.main.temp).toFixed(0), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"feels_like: \", weather.main.feels_like, \"K\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Ressure: \", weather.main.pressure, \"\\u0433\\u041F\\u0430\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421loudy: \", weather.clouds.all, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind: \", weather.wind.speed, \"m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0430\\u044F \\u0432\\u0440\\u0435\\u043C\\u044F: \", timeFormater(weather.dt)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F: \", timeData.time, \", \", timeData.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"sunset: \", timeFormater(weather.sys.sunset)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sunrise: \", timeFormater(weather.sys.sunrise)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n_c = Weather;\nexport default Weather;\n\n// const options = { day: 'numeric', month: 'long' };\n// const formattedDate = time.toLocaleDateString('ru-RU', options);\n// const hours = time.getHours();\n// const minutes = time.getMinutes();\n// return `${formattedDate} в ${hours}:${minutes}`;\n// };\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Weather","weather","timeFormater","sec","time","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","day","getDate","month","timeData","getMonth","date","kelvinToCelsius","kelvin","dt","children","cod","className","name","sys","country","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","main","temp","toFixed","description","feels_like","pressure","humidity","clouds","all","wind","speed","sunset","sunrise","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx"],"sourcesContent":["import React from 'react'\n\nconst Weather = ({weather}) => {\n    const timeFormater = (sec) => {\n        const time = new Date(sec * 1000)\n        const hours  = time.getHours()\n        const minutes= time.getMinutes()\n        const seconds = time.getSeconds();\n        const day = time.getDate(); // Получение числа\n        const month = timeData.getMonth() + 1; // Получение месяца (начиная с 0, поэтому добавляем 1)\n  return {\n    time: `${hours}:${minutes}:${seconds}`,\n    date: `${day}.${month}`\n  };\n    }\n\n\n    const kelvinToCelsius = (kelvin) => {\n        return kelvin - 273.15; \n      };\n      const timeData = timeFormater(weather.dt);\n\n\n    \n\n  return (\n    <>\n    {\n        weather && weather.cod !== '200' ?\n\n        <div className='weather'>\n         <h1>{weather.name}, {weather.sys.country}</h1>\n         <img src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`} />\n         <h2>{kelvinToCelsius(weather.main.temp).toFixed(0)}°C</h2>\n         <p>{weather.weather[0].description}</p>\n         <p>feels_like: {weather.main.feels_like}K</p>\n         <p>Ressure: {weather.main.pressure}гПа</p>\n         <p>Humidity: {weather.main.humidity}%</p>\n         <p>Сloudy: {weather.clouds.all}%</p>\n         <p>Wind: {weather.wind.speed}m/s</p>\n         <p>Текущая время: {timeFormater(weather.dt) }</p>\n         <p>Текущее время: {timeData.time}, {timeData.date}</p>\n         <p>sunset: { timeFormater(weather.sys.sunset)}</p>\n         <p>Sunrise: { timeFormater(weather.sys.sunrise)}</p>\n\n      </div>\n      :\n      <></>\n    }\n       \n    \n    </>\n  )\n}\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n\nexport default Weather\n\n\n// const options = { day: 'numeric', month: 'long' };\n// const formattedDate = time.toLocaleDateString('ru-RU', options);\n// const hours = time.getHours();\n// const minutes = time.getMinutes();\n// return `${formattedDate} в ${hours}:${minutes}`;\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}