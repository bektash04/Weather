{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  weather\n}) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentDate(new Date());\n    }, 1000); // Обновление времени каждую секунду\n\n    return () => clearInterval(interval); // Остановка интервала при размонтировании компонента\n  }, []);\n  const timeFormatter = date => {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const day = date.getDate();\n    const monthIndex = date.getMonth();\n    const months = [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"];\n    const month = months[monthIndex];\n    return `${hours}:${minutes} ${day} ${month}`;\n  };\n  const kelvinToCelsius = kelvin => {\n    return kelvin - 273.15;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: weather && weather.cod !== '200' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [weather.name, \", \", weather.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${weather.weather[0].icon}.png`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [kelvinToCelsius(weather.main.temp).toFixed(0), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"feels_like: \", weather.main.feels_like, \"K\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Ressure: \", weather.main.pressure, \"\\u0433\\u041F\\u0430\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421loudy: \", weather.clouds.all, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind: \", weather.wind.speed, \"m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0430\\u044F \\u0432\\u0440\\u0435\\u043C\\u044F: \", timeFormater(weather.dt)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"sunset: \", timeFormater(weather.sys.sunset)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sunrise: \", timeFormater(weather.sys.sunrise)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n_s(Weather, \"zLLOHWi+1oI1QEyVIaMRDWNuVqU=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Weather","weather","_s","currentDate","setCurrentDate","Date","interval","setInterval","clearInterval","timeFormatter","date","hours","getHours","minutes","getMinutes","day","getDate","monthIndex","getMonth","months","month","kelvinToCelsius","kelvin","children","cod","className","name","sys","country","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","main","temp","toFixed","description","feels_like","pressure","humidity","clouds","all","wind","speed","timeFormater","dt","sunset","sunrise","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n\nconst Weather = ({weather}) => {\n    const [currentDate, setCurrentDate] = useState(new Date());\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n          setCurrentDate(new Date());\n        }, 1000); // Обновление времени каждую секунду\n    \n        return () => clearInterval(interval); // Остановка интервала при размонтировании компонента\n      }, []);\n\n      const timeFormatter = (date) => {\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const day = date.getDate();\n        const monthIndex = date.getMonth();\n        const months = [\n          \"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\",\n          \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"\n        ];\n        const month = months[monthIndex];\n        return `${hours}:${minutes} ${day} ${month}`;\n      };\n\n    const kelvinToCelsius = (kelvin) => {\n        return kelvin - 273.15; \n      };\n    \n\n  return (\n    <>\n    {\n        weather && weather.cod !== '200' ?\n\n        <div className='weather'>\n         <h1>{weather.name}, {weather.sys.country}</h1>\n         <img src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`} />\n         <h2>{kelvinToCelsius(weather.main.temp).toFixed(0)}°C</h2>\n         <p>{weather.weather[0].description}</p>\n         <p>feels_like: {weather.main.feels_like}K</p>\n         <p>Ressure: {weather.main.pressure}гПа</p>\n         <p>Humidity: {weather.main.humidity}%</p>\n         <p>Сloudy: {weather.clouds.all}%</p>\n         <p>Wind: {weather.wind.speed}m/s</p>\n         <p>Текущая время: { timeFormater(weather.dt)}</p>\n     \n         <p>sunset: { timeFormater(weather.sys.sunset)}</p>\n         <p>Sunrise: { timeFormater(weather.sys.sunrise)}</p>\n\n      </div>\n      :\n      <></>\n    }\n       \n    \n    </>\n  )\n}\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n\nexport default Weather"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}