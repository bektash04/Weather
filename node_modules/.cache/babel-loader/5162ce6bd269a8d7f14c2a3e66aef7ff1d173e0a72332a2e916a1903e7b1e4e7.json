{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  weather\n}) => {\n  const timeFormater = sec => {\n    const time = new Date(sec * 1000);\n    const hours = time.getHours();\n    const minutes = time.getMinutes();\n    return `${hours} : ${minutes}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: weather && weather.cod !== '200' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [weather.name, \", \", weather.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${weather.weather[0].icon}.png`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }, this), \"' http://openweathermap.org/img/w/$\", icon_code, \".png'\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0430\\u044F \\u0432\\u0440\\u0435\\u043C\\u044F: \", timeFormater(weather.dt)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0417\\u0430\\u043A\\u0430\\u0442\\u044C: \", timeFormater(weather.sys.sunset)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0420\\u0430\\u0441\\u0441\\u0432\\u0435\\u0442: \", timeFormater(weather.sys.sunrise)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Weather","weather","timeFormater","sec","time","Date","hours","getHours","minutes","getMinutes","children","cod","className","name","sys","country","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","icon_code","dt","sunset","sunrise","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/React/Weather/src/commponents/Weather/Weather.jsx"],"sourcesContent":["import React from 'react'\n\nconst Weather = ({weather}) => {\n    const timeFormater = (sec) => {\n        const time = new Date(sec * 1000)\n        const hours  = time.getHours()\n        const minutes= time.getMinutes()\n        return `${hours} : ${minutes}`\n    }\n\n  return (\n    <>\n    {\n        weather && weather.cod !== '200' ?\n\n        <div className='weather'>\n         <h1>{weather.name}, {weather.sys.country}</h1>\n         <img src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`} />\n        ' http://openweathermap.org/img/w/${icon_code}.png'\n         <p>Текущая время: { timeFormater(weather.dt)}</p>\n         <p>Закать: { timeFormater(weather.sys.sunset)}</p>\n         <p>Рассвет: { timeFormater(weather.sys.sunrise)}</p>\n\n      </div>\n      :\n      <></>\n    }\n       \n    \n    </>\n  )\n}\n\n// {Object.keys(weather).length > 0 ? (\n//     <div>\n//         <h1>{weather.name}, {weather.sys.country}</h1>\n//       <p>lon: {weather.coord.lon},</p>\n//       <p>lat:{weather.coord.lat}</p>\n//       <p>{weather.weather[0].description}</p>\n//       <p>Температура: {weather.main.temp -273 .toFixed(0)}</p>\n//       <p>По ощущениям: {weather.main.feels_like}K</p>\n//       <p>Давление: {weather.main.pressure}</p>\n//       <p>Влажность: {weather.main.humidity}%</p>\n//       <p>Скорость ветра: {weather.wind.speed}m/s</p>\n//       <p>Облачность: {weather.clouds.all}%</p>\n//      <p>Восход: {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()} </p>\n//       <p>Закать: {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}</p>\n//     </div>\n//   ) : null}\n\nexport default Weather"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,OAAO,GAAGA,CAAC;EAACC;AAAO,CAAC,KAAK;EAC3B,MAAMC,YAAY,GAAIC,GAAG,IAAK;IAC1B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,GAAG,GAAG,IAAI,CAAC;IACjC,MAAMG,KAAK,GAAIF,IAAI,CAACG,QAAQ,CAAC,CAAC;IAC9B,MAAMC,OAAO,GAAEJ,IAAI,CAACK,UAAU,CAAC,CAAC;IAChC,OAAQ,GAAEH,KAAM,MAAKE,OAAQ,EAAC;EAClC,CAAC;EAEH,oBACEX,OAAA,CAAAE,SAAA;IAAAW,QAAA,EAEIT,OAAO,IAAIA,OAAO,CAACU,GAAG,KAAK,KAAK,gBAEhCd,OAAA;MAAKe,SAAS,EAAC,SAAS;MAAAF,QAAA,gBACvBb,OAAA;QAAAa,QAAA,GAAKT,OAAO,CAACY,IAAI,EAAC,IAAE,EAACZ,OAAO,CAACa,GAAG,CAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9CtB,OAAA;QAAKuB,GAAG,EAAG,mCAAkCnB,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACoB,IAAK;MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,uCAC5C,EAACG,SAAS,EAAC,OAC7C,eAAAzB,OAAA;QAAAa,QAAA,GAAG,6EAAe,EAAER,YAAY,CAACD,OAAO,CAACsB,EAAE,CAAC;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDtB,OAAA;QAAAa,QAAA,GAAG,wCAAQ,EAAER,YAAY,CAACD,OAAO,CAACa,GAAG,CAACU,MAAM,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClDtB,OAAA;QAAAa,QAAA,GAAG,8CAAS,EAAER,YAAY,CAACD,OAAO,CAACa,GAAG,CAACW,OAAO,CAAC;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElD,CAAC,gBAENtB,OAAA,CAAAE,SAAA,mBAAI;EAAC,gBAIL,CAAC;AAEP,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA2B,EAAA,GA9CM1B,OAAO;AAgDb,eAAeA,OAAO;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}